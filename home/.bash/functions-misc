#! ~/.bash/functions-misc

# =========================================================================

image2pdf() {
	convert -adjoin -format pdf "$@"
}

img2pdf() {
	jpegtopnm "${1:--}" | pnmtops -noturn | ps2pdf - "${2:--}"
}

cover2folder() {
	local resize="300x300>"
	local gravity=""
	local crop=""

	case "$1" in
	-l | -r )
		resize="600x300>"
		crop="50%x100%"

		case "$1" in
		-l ) gravity="west" ;;
		-r ) gravity="east" ;;
		esac

		shift
		;;
	-u | -d )
		resize="300x600>"
		crop="100%x50%"

		case "$1" in
		-u ) gravity="north" ;;
		-d ) gravity="south" ;;
		esac

		shift
		;;
	esac

	convert "${1:-cover-front.jpg}" \
		-resize "$resize" \
		${gravity:+-gravity "$gravity"} \
		${crop:+-crop "$crop"} \
		"folder.jpg"
}

# =========================================================================

# Additional function, complementary to "declare -p", but shorter in
# typing and produces more convenient output
var() {
	[ $# -eq 0 -a -n "$VAR_EVALED" ] && {
		eval "$VAR_EVALED"
		return $?
	}

	local format=""
	local m=""
	local a=""
	local k=""

	local opt
	OPTIND=1
	while getopts ":f:malk" opt
	do
		case "$opt" in
		f ) format="$OPTARG" ;;	# redeclare formatting string
		m ) m=1 ;;		# print the markers around the output
		a ) a="[@]" ;;		# print as array
		k ) k="!" ;;		# print array indexes
		l ) k="#" ;;		# print length (string or array)
		* ) echo "$FUNCNAME: Bad option: $OPTARG" >&2 ; return 2 ;;
		esac
	done
	shift $(( $OPTIND - 1 ))

	[ $# -gt 0 ] || {
		echo "$FUNCNAME: Usage: [-f format] [-m] [-a] [-l|-k] name ..." >&2
		return 1
	}

	VAR_EVALED="printf -- \"${format:-%s\\n}\""

	local n
	for n in "$@"
	do
		VAR_EVALED="$VAR_EVALED \"\${$k$n$a}\""
	done

	[ -n "$m" ] \
	&& VAR_EVALED="echo '==== VAR BEGIN: $@';$VAR_EVALED;echo '==== VAR END: $@';"

	eval "$VAR_EVALED"
}

# =========================================================================

# EOF
