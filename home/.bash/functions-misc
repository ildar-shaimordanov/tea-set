#! ~/.bash/functions-misc

# =========================================================================

image2pdf() {
	convert -adjoin -format pdf "$@"
}

img2pdf() {
	jpegtopnm "${1:--}" | pnmtops -noturn | ps2pdf - "${2:--}"
}

cover2folder() {
	local resize="300x300>"
	local gravity=""
	local crop=""

	case "$1" in
	-l | -r )
		resize="600x300>"
		crop="50%x100%"

		case "$1" in
		-l ) gravity="west" ;;
		-r ) gravity="east" ;;
		esac

		shift
		;;
	-u | -d )
		resize="300x600>"
		crop="100%x50%"

		case "$1" in
		-u ) gravity="north" ;;
		-d ) gravity="south" ;;
		esac

		shift
		;;
	esac

	convert "${1:-cover-front.jpg}" \
		-resize "$resize" \
		${gravity:+-gravity "$gravity"} \
		${crop:+-crop "$crop"} \
		"folder.jpg"
}

# =========================================================================

# Additional function, complementary to "declare -p", but shorter in
# typing and produces more convenient output
var() {
	[ "$1" = "-r" ] && {
		unset VAR_OPTS
		return
	}

	[ $# -eq 0 -a -n "$VAR_OPTS" ] && {
		$FUNCNAME $VAR_OPTS
		return $?
	}

	[ $# -eq 0 -o "$1" == "-h" ] && {
		echo "Usage: $FUNCNAME [ -h | -r | [-m] [-l] name ... ]" >&2
		return 1
	}

	VAR_OPTS="$@"

	local mark	# mark output?
	local len	# print length?

	local arr	# array or assoc

	local n1	# outer index
	local n2	# inner index

	local si	# string for parsed length
	local sv	# string for parsed values or indexes

	[ "$1" == "-m" ] && {
		mark=1
		shift
	}

	[ "$1" == "-l" ] && {
		len=1
		shift
	}

	[ -n "$mark" ] && echo "#### VAR BEGIN"

	for n1 in "$@"
	do
		case "$( declare -p "$n1" 2>/dev/null )" in
		''		) echo "$n1: not found" ; continue ;;
		'declare -a'*	) arr="array" ;;
		'declare -A'*	) arr="assoc" ;;
		*		) arr="" ;;
		esac

		[ -n "$arr" ] || {
			eval si="\${#$n1}"
			eval sv="\${$n1}"
			printf -- "%s%s = %s\n" "$n1" "${len:+:$si}" "$sv"
			continue
		}

		eval si="\${#$n1[@]}"
		eval sv="\${!$n1[@]}"
		printf -- "%s: %s(%s)\n" "$n1" "$arr" "$si"

		for n2 in $sv
		do
			eval si="\${#$n1[$n2]}"
			eval sv="\${$n1[$n2]}"
			printf -- " [%s%s] = %s\n" "$n2" "${len:+:$si}" "$sv"
		done
	done

	[ -n "$mark" ] && echo "#### VAR END"
}

# =========================================================================

# EOF
