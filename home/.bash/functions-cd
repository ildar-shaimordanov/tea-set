#! ~/.bash/functions-cd

# =========================================================================

# http://www.commandlinefu.com/commands/view/11246/bashksh-function-given-a-file-cd-to-the-directory-it-lives
cdf() {
	[ $# -ge 1 ] || {
		echo "Usage: $FUNCNAME filename" >&2
		return 1
	}

	cd "$( [ -f "$1" ] && dirname "$1" || echo "$1" )"
}

# http://www.commandlinefu.com/commands/view/13604/change-directory-for-current-path-in-bash
cdd() {
	[ $# -ge 2 ] || {
		echo "Usage: $FUNCNAME old_dir new_dir" >&2
		return 1
	}

	cd "$( pwd | sed -e "s/$1/$2/" )"
}

# http://www.commandlinefu.com/commands/view/12669/create-a-directory-and-change-into-it-at-the-same-time
mkcd() {
	[ $# -eq 1 ] || {
		echo "Usage: $FUNCNAME dirname" >&2
		return 1
	}

	mkdir -p "$1" && cd "$1"
}

# http://code.metager.de/source/xref/gnu/bash/examples/functions/ksh-cd
#
#  Chet Ramey <chet.ramey@case.edu>
#
#  Copyright 2001 Chester Ramey
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2, or (at your option)
#   any later version.
#
#   TThis program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software Foundation,
#   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

#
# ksh-like `cd': cd [-LP] [dir [change]]
#
cd() {
	local CDOPTS
	local old
	local new
	local dir

	OPTIND=1
	while getopts "LP" opt
	do
		case $opt in
		L|P)	CDOPTS="$CDOPTS -$opt" ;;
		*)	echo "$FUNCNAME: usage: $FUNCNAME [-LP] [dir] [change]" >&2
			return 2;;
		esac
	done

	shift $(( $OPTIND - 1 ))

	case $# in
	0)	builtin cd $CDOPTS "$HOME" ;;
	1) 	builtin cd $CDOPTS "$@" ;;
	2)	old="$1" new="$2"
		case "$PWD" in
		*$old*)	;;
		*)	 echo "${0##*/}: $FUNCNAME: bad substitution" >&2 ; return 1 ;;
		esac

		dir=${PWD//$old/$new}

		builtin cd $CDOPTS "$dir" && echo "$PWD"

		;;
	*)	echo "${0##*/}: $FUNCNAME: usage: $FUNCNAME [-LP] [dir] [change]" >&2
		return 2 ;;
	esac
}

# =========================================================================

# Jump around anywhere
# - Keep the list of most frequently visited directories
# - Allow to jump to the directories fastly by aliases
j() {
	if [ $# -eq 0 ]
	then
		cat - <<HELP
Jump around anywhere
  j    ALIAS [SUBDIR] Jump to the directory by its alias
  j -l ALIAS [SUBDIR] List the directory content
  j -a ALIAS          Create the alias for the current directory
  j -d ALIAS          Delete the alias
  j -A                Display all directories and their aliases
HELP
		return
	fi

	local CONF=~/.jconf

	if [ ! -f "$CONF" ]
	then
		echo "File not exist: ~/.jconf" >&2
	fi

	local jcmd="cd"

	local opt
	while getopts ":la:d:A" opt
	do
		case "$opt" in
		l )
			jcmd="ls"
			break
			;;
		a )
			if [ -f "$CONF" ] && grep -Pq "^$OPTARG\t" "$CONF"
			then
				echo "Entry already exists: $OPTARG" >&2
				return 255
			fi
			printf '%s\t%s\n' "$OPTARG" "$PWD" >>"$CONF"
			return $?
			;;
		d )
			sed -i "/^$OPTARG\t/d" "$CONF"
			return $?
			;;
		A )
			sort "$CONF"
			return $?
			;;
		: )
			echo "Alias required" >&2
			return 255
			;;
		\? )
			echo "Bad option: $OPTARG"
			return 255
			;;
		esac
	done

	shift $(( OPTIND - 1 ))

	if [ -z "$1" ]
	then
		echo "Alias not specified" >&2
		return $?
	fi

	local -a jdir
	mapfile -t jdir < <( sed -n "s/^$1\t*//p" "$CONF" )

	case "${#jdir[@]}" in
	0 )
		echo "No entry found: $1" >&2
		return 255
		;;
	1 )
		# cd or ls
		$jcmd "${jdir[0]}/$2"
		;;
	* )
		echo "More than one entry found: $1" >&2
		return 255
		;;
	esac
}

# =========================================================================

# EOF
